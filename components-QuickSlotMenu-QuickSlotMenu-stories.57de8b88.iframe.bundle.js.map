{"version":3,"file":"components-QuickSlotMenu-QuickSlotMenu-stories.57de8b88.iframe.bundle.js","mappings":";;;;;AAeA;AACA;;;;;AAKA;AACA;;AAEA;;AAIA;AAGA;;AAEA;;ACzBA;;;;AAIA;;AAEA;;AAEA;AACA;;;;;AAKA;;AAGA;;;;;;;;ACdA;AACA;;AAEA;;AAEA;;AAEA;AAGA;;;;;;;;;;;;AAYA;;;;;;;;AC1BA;AACA;;AAEA;AAGA;;AAKA;AAEA;AAIA;;AAGA;AAIA;AACA;;;ACxBA;AACA;;;AAGA;;AAEA;;AAEA;;;;;;;AAOA;;AAGA","sources":["webpack://totamjung/./src/components/common/ErrorText/ErrorText.styled.ts","webpack://totamjung/./src/components/common/Input/Input.styled.ts","webpack://totamjung/./src/components/common/NamedFrame/NamedFrame.styled.ts","webpack://totamjung/./src/components/common/Text/Text.styled.ts","webpack://totamjung/./src/components/common/Textarea/Textarea.styled.ts"],"sourcesContent":["import { styled } from 'styled-components';\nimport type { CSSProperties } from 'styled-components';\n\nconst getContainerSizeByFontSize = (fontSize: '16px' | '14px' | '13px') => {\n  return `${Number(fontSize.slice(0, 2)) + 3}px`;\n};\n\nexport const Container = styled.div<{\n  $fontSize: '16px' | '14px' | '13px';\n  $height?: CSSProperties['height'];\n}>`\n  display: flex;\n  column-gap: 4px;\n\n  width: 100%;\n  min-height: ${({ $fontSize }) => getContainerSizeByFontSize($fontSize)};\n  height: ${({ $height }) => ($height === undefined ? 'auto' : $height)};\n\n  & > svg {\n    flex-shrink: 0;\n\n    width: ${({ $fontSize }) => getContainerSizeByFontSize($fontSize)};\n    height: ${({ $fontSize }) => getContainerSizeByFontSize($fontSize)};\n\n    color: ${({ theme }) => theme.color.LIGHT_RED};\n  }\n`;\n\nexport const ErrorText = styled.p<{\n  $fontSize: '16px' | '14px' | '13px';\n}>`\n  font-size: ${({ $fontSize }) => $fontSize};\n\n  color: ${({ theme }) => theme.color.LIGHT_RED};\n`;\n","import { styled } from 'styled-components';\nimport type { CSSProperties } from 'styled-components';\n\nexport const Input = styled.input<{\n  $width: CSSProperties['width'];\n  $hasError: boolean;\n  $textAlign: 'left' | 'center';\n}>`\n  width: ${({ $width }) => $width};\n  height: 30px;\n  padding: 0 6px;\n\n  border: 1.5px solid ${({ theme }) => theme.color.LIGHTER_BROWN};\n  border-radius: 4px;\n  background-color: ${({ theme }) => theme.color.DARK_BROWN};\n\n  color: ${({ theme }) => theme.color.WHITE};\n  text-align: ${({ $textAlign }) => $textAlign};\n  font-size: 13px;\n\n  &:focus,\n  &:active {\n    border-color: ${({ theme, $hasError }) =>\n      $hasError ? theme.color.RED : theme.color.LEMON};\n    outline: 3px solid\n      ${({ theme, $hasError }) =>\n        $hasError ? theme.color.RED : theme.color.LEMON}70;\n  }\n\n  transition: outline 0.05s;\n`;\n","import { styled } from 'styled-components';\nimport type { CSSProperties } from 'styled-components';\n\nexport const Container = styled.div<{\n  $width: CSSProperties['width'];\n  $height: CSSProperties['height'];\n  $padding: CSSProperties['padding'];\n}>`\n  display: inline-block;\n  position: relative;\n\n  width: ${({ $width }) => $width};\n  height: ${({ $height }) => $height};\n\n  padding: ${({ $padding }) => $padding};\n\n  border: 2px solid ${({ theme }) => theme.color.LIGHTER_BROWN};\n  border-radius: 6px;\n  background-color: ${({ theme }) => theme.color.DARK_BROWN};\n`;\n\nexport const Title = styled.div`\n  display: inline-block;\n  overflow: hidden;\n  position: absolute;\n  top: -2px;\n  right: -2px;\n\n  max-width: 80%;\n  height: 26px;\n\n  padding: 0 8px 0 8px;\n  border-radius: 0 6px 0 6px;\n  background-color: ${({ theme }) => theme.color.LIGHTER_BROWN};\n\n  font-size: 14px;\n  font-weight: 800;\n  line-height: 26px;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n","import { styled, css } from 'styled-components';\n\nexport const Text = styled.p<{\n  $type: 'primary' | 'semiPrimary' | 'normal' | 'code';\n  $fontSize: '16px' | '14px' | '13px';\n  $textAlign: 'left' | 'center' | 'right';\n}>`\n  text-align: ${({ $textAlign }) => $textAlign};\n  font-size: ${({ $fontSize }) => $fontSize};\n\n  ${({ theme, $type }) => {\n    if ($type === 'primary') {\n      return css`\n        color: ${theme.color.GOLD};\n        font-weight: 600;\n      `;\n    }\n\n    if ($type === 'semiPrimary') {\n      return css`\n        color: ${theme.color.LEMON};\n      `;\n    }\n\n    if ($type === 'code') {\n      return css`\n        font-family: 'IBM Plex Mono', Consolas, Pretendard;\n        color: ${theme.color.WHITE};\n      `;\n    }\n\n    return css`\n      color: ${theme.color.WHITE};\n    `;\n  }}\n`;\n","import { styled } from 'styled-components';\nimport type { CSSProperties } from 'styled-components';\n\nexport const Textarea = styled.textarea<{\n  $width: CSSProperties['width'];\n  $height: CSSProperties['height'];\n  $hasError: boolean;\n}>`\n  width: ${({ $width }) => $width};\n  height: ${({ $height }) => $height};\n  padding: 6px;\n\n  border: 1.5px solid ${({ theme }) => theme.color.LIGHTER_BROWN};\n  border-radius: 4px;\n  background-color: ${({ theme }) => theme.color.DARK_BROWN};\n\n  color: ${({ theme }) => theme.color.WHITE};\n  font-size: 13px;\n\n  resize: none;\n\n  &:focus,\n  &:active {\n    border-color: ${({ theme, $hasError }) =>\n      $hasError ? theme.color.RED : theme.color.LEMON};\n    outline: 3px solid\n      ${({ theme, $hasError }) =>\n        $hasError ? theme.color.RED : theme.color.LEMON}70;\n  }\n\n  transition: outline 0.05s;\n`;\n"],"names":[],"sourceRoot":""}